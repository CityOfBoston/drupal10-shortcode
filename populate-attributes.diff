diff --git a/shortcode_basic_tags/shortcode_basic_tags.module b/shortcode_basic_tags/shortcode_basic_tags.module
index 0742fd1..dd54bfd 100644
--- a/shortcode_basic_tags/shortcode_basic_tags.module
+++ b/shortcode_basic_tags/shortcode_basic_tags.module
@@ -18,6 +18,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Show an image.'),
     'process callback' => 'shortcode_basic_tags_shortcode_img',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_img_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_img_tip',
   );
   $shortcodes['highlight'] = array(
@@ -25,13 +26,15 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Insert a span with highlight css class around the text.'),
     'process callback' => 'shortcode_basic_tags_shortcode_highlight',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_highlight_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_highlight_tip',
   );
   $shortcodes['button'] = array(
     'title' => t('Button'),
-    'description' => t('Insert a link formatted like as a button.'),
+    'description' => t('Insert a link formatted as a button.'),
     'process callback' => 'shortcode_basic_tags_shortcode_button',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_button_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_button_tip',
   );
   $shortcodes['dropcap'] = array(
@@ -39,6 +42,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Replace the given text formatted like as a dropcap.'),
     'process callback' => 'shortcode_basic_tags_shortcode_dropcap',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_dropcap_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_dropcap_tip',
   );
   $shortcodes['item'] = array(
@@ -46,6 +50,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Insert div or span around the text with some css classes.'),
     'process callback' => 'shortcode_basic_tags_shortcode_item',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_item_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_item_tip',
   );
   $shortcodes['clear'] = array(
@@ -53,6 +58,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Insert a float-clearing div for a proper layout.'),
     'process callback' => 'shortcode_basic_tags_shortcode_clear',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_clear_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_clear_tip',
   );
   $shortcodes['link'] = array(
@@ -60,6 +66,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Makes an aliased link to the given path.'),
     'process callback' => 'shortcode_basic_tags_shortcode_link',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_link_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_link_tip',
   );
   $shortcodes['random'] = array(
@@ -67,6 +74,7 @@ function shortcode_basic_tags_shortcode_info() {
     'description' => t('Generating random text.'),
     'process callback' => 'shortcode_basic_tags_shortcode_random',
     //'settings callback' => '_shortcode_settings_form', TODO
+    'attributes callback' => 'shortcode_basic_tags_random_attributes',
     'tips callback' => 'shortcode_basic_tags_shortcode_random_tip',
   );
 
@@ -100,6 +108,25 @@ function shortcode_basic_tags_theme() {
 }
 
 /**
+ * Attributes form element for highlight shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_highlight_attributes($form, &$form_state) {
+  $form['highlight-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'highlight'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
+/**
  * Inserts a span with highlight css class around the text
  *
  * Calling
@@ -143,6 +170,43 @@ function shortcode_basic_tags_shortcode_highlight_tip($format, $long) {
   return implode(' ', $output);
 }
 
+/**
+ * Attributes form element for button shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_button_attributes($form, &$form_state) {
+  $form['button-title'] = array(
+    '#title' => t('Title'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'button'),
+      ),
+    ),
+  );
+  $form['button-path'] = array(
+    '#title' => t('Path'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'button'),
+      ),
+    ),
+  );
+  $form['button-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'button'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
 function shortcode_basic_tags_shortcode_button($attrs, $text) {
   $attrs = shortcode_attrs(array(
       'title' => 'title default',
@@ -180,6 +244,24 @@ function theme_shortcode_button($vars) {
   return '<a href="' . $vars['path'] . '" class="' . $vars['class'] . '"><span>' . $vars['text'] . '</span></a>';
 }
 
+/**
+ * Attributes form element for dropcap shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_dropcap_attributes($form, &$form_state) {
+  $form['dropcap-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'dropcap'),
+      ),
+    ),
+  );
+
+  return $form;
+}
 
 function shortcode_basic_tags_shortcode_dropcap($attrs, $text) {
   $attrs = shortcode_attrs(array(
@@ -227,18 +309,36 @@ function shortcode_basic_tags_shortcode_dropcap_tip($format, $long) {
   return implode(' ', $output);
 }
 
-// FIXME: what for these funcs?
-//function shortcode_basic_tags_quote_attributes($form, &$form_state) {
-//  $form['class'] = array(
-//    '#title' => t('class'),
-//    '#type' => 'textfield',
-//  );
-//
-//  return $form;
-//}
-//
-//function shortcode_basic_tags_quote_options_submit($form, &$form_state) {
-//}
+/**
+ * Attributes form element for quote shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_quote_attributes($form, &$form_state) {
+  $form['quote-author'] = array(
+    '#title' => t('Author'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'quote'),
+      ),
+    ),
+  );
+  $form['quote-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'quote'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
+function shortcode_basic_tags_quote_options_submit($form, &$form_state) {
+}
 
 /**
  *
@@ -259,6 +359,9 @@ function shortcode_basic_tags_shortcode_quote($attrs, $text) {
   return theme('shortcode_quote', array('text' => $text, 'author' => $attrs['author'], 'class' => $class));
 }
 
+/**
+ * Theme the quote as a blockquote element, optionally with author and class.
+ */
 function theme_shortcode_quote($vars) {
   $output = '';
 
@@ -268,7 +371,7 @@ function theme_shortcode_quote($vars) {
   }
   $output .= $vars['text'];
 
-  return '<span class="' . $vars['class'] . '">' . $output . '</span>';
+  return '<blockquote class="' . $vars['class'] . '">' . $output . '</blockquote>';
 }
 
 function shortcode_basic_tags_shortcode_quote_tip($format, $long) {
@@ -307,6 +410,43 @@ function shortcode_basic_tags_shortcode_quote_tip($format, $long) {
   return implode(' ', $output);
 }
 
+/**
+ * Attributes form element for quote shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_img_attributes($form, &$form_state) {
+  $form['img-src'] = array(
+    '#title' => t('Source URL'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'img'),
+      ),
+    ),
+  );
+  $form['img-alt'] = array(
+    '#title' => t('Alt text'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'img'),
+      ),
+    ),
+  );
+  $form['img-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'img'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
 function shortcode_basic_tags_shortcode_img($attrs, $text) {
   $attrs = shortcode_attrs(array(
       'class' => 'img',
@@ -333,13 +473,59 @@ function shortcode_basic_tags_shortcode_img_tip($format, $long) {
   return implode(' ', $output);
 }
 
+/**
+ * Attributes form element for item shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_item_attributes($form, &$form_state) {
+  $form['item-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'item'),
+      ),
+    ),
+  );
+  $form['item-style'] = array(
+    '#title' => t('Style'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'item'),
+      ),
+    ),
+  );
+  $form['item-id'] = array(
+    '#title' => t('ID'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'item'),
+      ),
+    ),
+  );
+  $form['item-type'] = array(
+    '#title' => t('type'),
+    '#type' => 'select',
+    '#options' => array('d' => 'div', 's' => 'span'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'item'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
 function shortcode_basic_tags_shortcode_item($attrs, $text) {
   $attrs = shortcode_attrs(array(
       'class' => '',
       'style' => '',
       'id' => '',
       'type' => 'div',
-      // ...etc
     ),
     $attrs
   );
@@ -382,13 +568,59 @@ function theme_shortcode_item($vars) {
   return '<' . $vars['type'] . $id . $class . $style . '>' . $vars['text'] . '</' . $vars['type'] . '>';
 }
 
+/**
+ * Attributes form element for clear shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_clear_attributes($form, &$form_state) {
+  $form['clear-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'clear'),
+      ),
+    ),
+  );
+  $form['clear-style'] = array(
+    '#title' => t('Style'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'clear'),
+      ),
+    ),
+  );
+  $form['clear-id'] = array(
+    '#title' => t('ID'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'clear'),
+      ),
+    ),
+  );
+  $form['clear-type'] = array(
+    '#title' => t('type'),
+    '#type' => 'select',
+    '#options' => array('d' => 'div', 's' => 'span'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'clear'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
 function shortcode_basic_tags_shortcode_clear($attrs, $text) {
   $attrs = shortcode_attrs(array(
       'class' => '',
       'style' => '',
       'id' => '',
       'type' => 'div',
-      // ...etc
     ),
     $attrs
   );
@@ -433,6 +665,43 @@ function theme_shortcode_clear($vars) {
   return '<' . $vars['type'] . $id . $class . $style . '>' . $vars['text'] . '</' . $vars['type'] . '>';
 }
 
+/**
+ * Attributes form element for link shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_link_attributes($form, &$form_state) {
+  $form['link-title'] = array(
+    '#title' => t('Title'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'link'),
+      ),
+    ),
+  );
+  $form['link-path'] = array(
+    '#title' => t('Path'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'link'),
+      ),
+    ),
+  );
+  $form['link-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'link'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
 /*
  * Create aliased link
  *
@@ -444,7 +713,7 @@ function shortcode_basic_tags_shortcode_link($attrs, $text) {
   $attrs = shortcode_attrs(array(
       'path' => '<front>',
       'title' => '',
-      // ...etc
+      'class' => '',
     ), $attrs
   );
 
@@ -480,6 +749,24 @@ function shortcode_basic_tags_shortcode_link_tip($format, $long) {
   return implode(' ', $output);
 }
 
+/**
+ * Attributes form element for random shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_basic_tags_random_attributes($form, &$form_state) {
+  $form['random-length'] = array(
+    '#title' => t('Length'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'random'),
+      ),
+    ),
+  );
+
+  return $form;
+}
 
 /**
  * Generates a random code
@@ -493,9 +780,6 @@ function shortcode_basic_tags_shortcode_link_tip($format, $long) {
  */
 function shortcode_basic_tags_shortcode_random($attrs, $text) {
   $attrs = shortcode_attrs(array(
-      'class' => '',
-      'style' => '',
-      'id' => '',
       'length' => 8,
     ),
     $attrs
diff --git a/shortcode_embed_content/shortcode_embed_content.module b/shortcode_embed_content/shortcode_embed_content.module
index 927f99f..81e39d4 100644
--- a/shortcode_embed_content/shortcode_embed_content.module
+++ b/shortcode_embed_content/shortcode_embed_content.module
@@ -15,6 +15,7 @@ function shortcode_embed_content_shortcode_info() {
     'process callback' => 'shortcode_embed_content_shortcode_node',
     //'settings callback' => '_shortcode_settings_form', TODO
     'tips callback' => 'shortcode_embed_content_node_tip',
+    'attributes callback' => 'shortcode_embed_content_attributes',
     'default settings' => array(),
   );
 
@@ -22,6 +23,93 @@ function shortcode_embed_content_shortcode_info() {
 }
 
 /**
+ * Attributes form element for embed_content shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_embed_content_attributes($form, &$form_state) {
+  $form['embed_content-nid'] = array(
+    '#title' => t('Node nid'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-class'] = array(
+    '#title' => t('Class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-view_mode'] = array(
+    '#title' => t('View mode'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-show_title'] = array(
+    '#title' => t('Show title'),
+    '#type' => 'select',
+    '#options' => array('true' => 'True', 'false' => 'False'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-show_submitted'] = array(
+    '#title' => t('Show submitted'),
+    '#type' => 'select',
+    '#options' => array('true' => 'True', 'false' => 'False'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-show_meta'] = array(
+    '#title' => t('Show meta'),
+    '#type' => 'select',
+    '#options' => array('true' => 'True', 'false' => 'False'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-show_terms'] = array(
+    '#title' => t('Show terms'),
+    '#type' => 'select',
+    '#options' => array('true' => 'True', 'false' => 'False'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+  $form['embed_content-show_links'] = array(
+    '#title' => t('Show links'),
+    '#type' => 'select',
+    '#options' => array('true' => 'True', 'false' => 'False'),
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'embed_content'),
+      ),
+    ),
+  );
+
+  return $form;
+}
+
+/**
  * Embed a node content into the text
  *
  * Calling
diff --git a/shortcode_video/shortcode_video.module b/shortcode_video/shortcode_video.module
index 1c305a0..2efef63 100644
--- a/shortcode_video/shortcode_video.module
+++ b/shortcode_video/shortcode_video.module
@@ -8,7 +8,7 @@ function shortcode_video_shortcode_info() {
     'title' => t('Video macro'),
     'description' => t('Inserts embedded video code.'),
     'process callback' => 'shortcode_video_macro_process',
-    //'attributes callback' => "shortcode_basic_tags_quote_attributes",
+    'attributes callback' => 'shortcode_video_attributes',
     'tips callback' => 'shortcode_video_tip',
   );
   return $shortcodes;
@@ -31,6 +31,42 @@ function shortcode_video_theme() {
   );
 }
 
+
+/**
+ * Attributes form element for video shortcode.
+ *
+ * Used by shortcode_wysiwyg module to add form elements for attributes.
+ */
+function shortcode_video_attributes($form, &$form_state) {
+  $form['video-height'] = array(
+    '#title' => t('Height'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'video'),
+      ),
+    ),
+  );
+  $form['video-width'] = array(
+    '#title' => t('Width'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'video'),
+      ),
+    ),
+  );
+  $form['video-class'] = array(
+    '#title' => t('class'),
+    '#type' => 'textfield',
+    '#states' => array(
+      'visible' => array(
+        ':input[name="shortcode"]' => array('value' => 'video'),
+      ),
+    ),
+  );
+}
+
 /*
  * Youtube embed code
  *
